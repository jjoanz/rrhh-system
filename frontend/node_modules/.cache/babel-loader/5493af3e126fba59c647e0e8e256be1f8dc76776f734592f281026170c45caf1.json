{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  const currentInstanceRef = React.useRef(null);\n  return useCallback(instance => {\n    const prevInstance = currentInstanceRef.current;\n    currentInstanceRef.current = instance;\n    // Only run mount/unmount logic when the instance actually changes\n    if (instance !== prevInstance) {\n      if (instance) {\n        visualState.onMount && visualState.onMount(instance);\n      }\n      if (visualElement) {\n        if (instance) {\n          visualElement.mount(instance);\n        } else {\n          visualElement.unmount();\n        }\n      }\n    }\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Include externalRef in dependencies to ensure the callback updates\n   * when the ref changes, allowing proper ref forwarding.\n   */\n  [visualElement, externalRef]);\n}\nexport { useMotionRef };","map":{"version":3,"names":["React","useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","currentInstanceRef","useRef","instance","prevInstance","current","onMount","mount","unmount"],"sources":["C:/Users/josemontedeoca/rrhh-system/frontend/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["\"use client\";\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    const currentInstanceRef = React.useRef(null);\n    return useCallback((instance) => {\n        const prevInstance = currentInstanceRef.current;\n        currentInstanceRef.current = instance;\n        // Only run mount/unmount logic when the instance actually changes\n        if (instance !== prevInstance) {\n            if (instance) {\n                visualState.onMount && visualState.onMount(instance);\n            }\n            if (visualElement) {\n                if (instance) {\n                    visualElement.mount(instance);\n                }\n                else {\n                    visualElement.unmount();\n                }\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Include externalRef in dependencies to ensure the callback updates\n     * when the ref changes, allowing proper ref forwarding.\n     */\n    [visualElement, externalRef]);\n}\n\nexport { useMotionRef };\n"],"mappings":"AAAA,YAAY;;AACZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,+BAA+B;;AAE3D;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAE;EAC3D,MAAMC,kBAAkB,GAAGP,KAAK,CAACQ,MAAM,CAAC,IAAI,CAAC;EAC7C,OAAOP,WAAW,CAAEQ,QAAQ,IAAK;IAC7B,MAAMC,YAAY,GAAGH,kBAAkB,CAACI,OAAO;IAC/CJ,kBAAkB,CAACI,OAAO,GAAGF,QAAQ;IACrC;IACA,IAAIA,QAAQ,KAAKC,YAAY,EAAE;MAC3B,IAAID,QAAQ,EAAE;QACVL,WAAW,CAACQ,OAAO,IAAIR,WAAW,CAACQ,OAAO,CAACH,QAAQ,CAAC;MACxD;MACA,IAAIJ,aAAa,EAAE;QACf,IAAII,QAAQ,EAAE;UACVJ,aAAa,CAACQ,KAAK,CAACJ,QAAQ,CAAC;QACjC,CAAC,MACI;UACDJ,aAAa,CAACS,OAAO,CAAC,CAAC;QAC3B;MACJ;IACJ;IACA,IAAIR,WAAW,EAAE;MACb,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;QACnCA,WAAW,CAACG,QAAQ,CAAC;MACzB,CAAC,MACI,IAAIP,WAAW,CAACI,WAAW,CAAC,EAAE;QAC/BA,WAAW,CAACK,OAAO,GAAGF,QAAQ;MAClC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACI,CAACJ,aAAa,EAAEC,WAAW,CAAC,CAAC;AACjC;AAEA,SAASH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}