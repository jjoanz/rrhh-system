{"ast":null,"code":"import api from'./api';const vacantesService={// ===============================\n// VACANTES\n// ===============================\n// Obtener todas las vacantes activas\nasync getVacantesActivas(){try{const response=await api.get('/vacantes');return response.data;}catch(error){console.error('Error al obtener vacantes:',error);throw error;}},// Crear nueva vacante\nasync crearVacante(vacante){try{const response=await api.post('/vacantes',vacante);return response.data;}catch(error){console.error('Error al crear vacante:',error);throw error;}},// Buscar vacantes con filtros\nasync buscarVacantes(filtros){try{const params=new URLSearchParams();Object.keys(filtros).forEach(key=>{if(filtros[key]!==''&&filtros[key]!==null&&filtros[key]!==undefined){params.append(key,filtros[key]);}});const response=await api.get(`/vacantes/buscar?${params.toString()}`);return response.data;}catch(error){console.error('Error al buscar vacantes:',error);throw error;}},// ===============================\n// SOLICITUDES\n// ===============================\nasync getSolicitudes(usuarioID,rol){try{const params=new URLSearchParams();if(usuarioID)params.append('usuarioID',usuarioID);if(rol)params.append('rol',rol);const response=await api.get(`/vacantes/solicitudes?${params.toString()}`);return response.data;}catch(error){console.error('Error al obtener solicitudes:',error);throw error;}},async crearSolicitud(solicitud){try{const response=await api.post('/vacantes/solicitudes',solicitud);return response.data;}catch(error){console.error('Error al crear solicitud:',error);throw error;}},async aprobarSolicitud(solicitudId){let comentarios=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const response=await api.put(`/vacantes/solicitudes/${solicitudId}/aprobar`,{comentarios});return response.data;}catch(error){console.error('Error al aprobar solicitud:',error);throw error;}},async rechazarSolicitud(solicitudId){let comentarios=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const response=await api.put(`/vacantes/solicitudes/${solicitudId}/rechazar`,{comentarios});return response.data;}catch(error){console.error('Error al rechazar solicitud:',error);throw error;}},// ===============================\n// POSTULACIONES\n// ===============================\nasync getPostulaciones(usuarioID,rol){try{const params=new URLSearchParams();if(usuarioID)params.append('usuarioID',usuarioID);if(rol)params.append('rol',rol);const response=await api.get(`/vacantes/postulaciones?${params.toString()}`);return response.data;}catch(error){console.error('Error al obtener postulaciones:',error);throw error;}},async crearPostulacion(postulacion){try{const response=await api.post('/vacantes/postulaciones',postulacion);return response.data;}catch(error){console.error('Error al crear postulación:',error);throw error;}},async cambiarEstadoPostulacion(postulacionId,estado){let comentarios=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{const response=await api.put(`/vacantes/postulaciones/${postulacionId}/estado`,{estado,comentarios});return response.data;}catch(error){console.error('Error al cambiar estado de postulación:',error);throw error;}},// ===============================\n// ESTADÍSTICAS Y REPORTES\n// ===============================\nasync getEstadisticas(){try{const response=await api.get('/vacantes/estadisticas');return response.data;}catch(error){console.error('Error al obtener estadísticas:',error);throw error;}},async getReportesResumen(){try{const response=await api.get('/vacantes/reportes/resumen');return response.data;}catch(error){console.error('Error al obtener resumen de reportes:',error);throw error;}},async exportarReporte(formato,tipo){try{const response=await api.post('/vacantes/reportes/exportar',{formato,tipo});return response.data;}catch(error){console.error('Error al exportar reporte:',error);throw error;}},// ===============================\n// DATOS AUXILIARES\n// ===============================\nasync getDepartamentos(){try{const response=await api.get('/vacantes/departamentos');return response.data;}catch(error){console.error('Error al obtener departamentos:',error);throw error;}},async getUsuarios(){try{const response=await api.get('/vacantes/usuarios');return response.data;}catch(error){console.error('Error al obtener usuarios:',error);throw error;}}};export default vacantesService;","map":{"version":3,"names":["api","vacantesService","getVacantesActivas","response","get","data","error","console","crearVacante","vacante","post","buscarVacantes","filtros","params","URLSearchParams","Object","keys","forEach","key","undefined","append","toString","getSolicitudes","usuarioID","rol","crearSolicitud","solicitud","aprobarSolicitud","solicitudId","comentarios","arguments","length","put","rechazarSolicitud","getPostulaciones","crearPostulacion","postulacion","cambiarEstadoPostulacion","postulacionId","estado","getEstadisticas","getReportesResumen","exportarReporte","formato","tipo","getDepartamentos","getUsuarios"],"sources":["C:/Users/josemontedeoca/rrhh-system/frontend/src/api/vacantesService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst vacantesService = {\r\n  // ===============================\r\n  // VACANTES\r\n  // ===============================\r\n\r\n  // Obtener todas las vacantes activas\r\n  async getVacantesActivas() {\r\n    try {\r\n      const response = await api.get('/vacantes');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener vacantes:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear nueva vacante\r\n  async crearVacante(vacante) {\r\n    try {\r\n      const response = await api.post('/vacantes', vacante);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al crear vacante:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Buscar vacantes con filtros\r\n  async buscarVacantes(filtros) {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      Object.keys(filtros).forEach(key => {\r\n        if (filtros[key] !== '' && filtros[key] !== null && filtros[key] !== undefined) {\r\n          params.append(key, filtros[key]);\r\n        }\r\n      });\r\n\r\n      const response = await api.get(`/vacantes/buscar?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al buscar vacantes:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ===============================\r\n  // SOLICITUDES\r\n  // ===============================\r\n\r\n  async getSolicitudes(usuarioID, rol) {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (usuarioID) params.append('usuarioID', usuarioID);\r\n      if (rol) params.append('rol', rol);\r\n\r\n      const response = await api.get(`/vacantes/solicitudes?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener solicitudes:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async crearSolicitud(solicitud) {\r\n    try {\r\n      const response = await api.post('/vacantes/solicitudes', solicitud);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al crear solicitud:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async aprobarSolicitud(solicitudId, comentarios = '') {\r\n    try {\r\n      const response = await api.put(`/vacantes/solicitudes/${solicitudId}/aprobar`, { comentarios });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al aprobar solicitud:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async rechazarSolicitud(solicitudId, comentarios = '') {\r\n    try {\r\n      const response = await api.put(`/vacantes/solicitudes/${solicitudId}/rechazar`, { comentarios });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al rechazar solicitud:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ===============================\r\n  // POSTULACIONES\r\n  // ===============================\r\n\r\n  async getPostulaciones(usuarioID, rol) {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (usuarioID) params.append('usuarioID', usuarioID);\r\n      if (rol) params.append('rol', rol);\r\n\r\n      const response = await api.get(`/vacantes/postulaciones?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener postulaciones:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async crearPostulacion(postulacion) {\r\n    try {\r\n      const response = await api.post('/vacantes/postulaciones', postulacion);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al crear postulación:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async cambiarEstadoPostulacion(postulacionId, estado, comentarios = '') {\r\n    try {\r\n      const response = await api.put(`/vacantes/postulaciones/${postulacionId}/estado`, { estado, comentarios });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al cambiar estado de postulación:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ===============================\r\n  // ESTADÍSTICAS Y REPORTES\r\n  // ===============================\r\n\r\n  async getEstadisticas() {\r\n    try {\r\n      const response = await api.get('/vacantes/estadisticas');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener estadísticas:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getReportesResumen() {\r\n    try {\r\n      const response = await api.get('/vacantes/reportes/resumen');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener resumen de reportes:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async exportarReporte(formato, tipo) {\r\n    try {\r\n      const response = await api.post('/vacantes/reportes/exportar', { formato, tipo });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al exportar reporte:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ===============================\r\n  // DATOS AUXILIARES\r\n  // ===============================\r\n\r\n  async getDepartamentos() {\r\n    try {\r\n      const response = await api.get('/vacantes/departamentos');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener departamentos:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getUsuarios() {\r\n    try {\r\n      const response = await api.get('/vacantes/usuarios');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener usuarios:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default vacantesService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}