{"ast":null,"code":"import{apiRequest}from'./apiClient';// Obtener todas las acciones\nexport const getAcciones=async()=>{try{return await apiRequest('/acciones-personal');}catch(error){console.error('Error al obtener acciones:',error);return{success:false,message:error.message};}};// Obtener estadísticas\nexport const getEstadisticas=async()=>{try{return await apiRequest('/acciones-personal/estadisticas');}catch(error){console.error('Error al obtener estadísticas:',error);return{success:false,message:error.message};}};// Obtener acciones pendientes\nexport const getAccionesPendientes=async()=>{try{return await apiRequest('/acciones-personal/pendientes');}catch(error){console.error('Error al obtener acciones pendientes:',error);return{success:false,message:error.message};}};// Obtener detalle de una acción específica\nexport const getAccionDetalle=async accionId=>{try{return await apiRequest(`/acciones-personal/${accionId}`);}catch(error){console.error('Error al obtener detalle de acción:',error);return{success:false,message:error.message};}};// Crear nueva acción\nexport const crearAccion=async datosAccion=>{try{return await apiRequest('/acciones-personal',{method:'POST',body:JSON.stringify(datosAccion)});}catch(error){console.error('Error al crear acción:',error);return{success:false,message:error.message};}};// Aprobar acción\nexport const aprobarAccion=async(accionId,comentarios)=>{try{return await apiRequest(`/acciones-personal/${accionId}/aprobar`,{method:'POST',body:JSON.stringify({comentarios})});}catch(error){console.error('Error al aprobar acción:',error);return{success:false,message:error.message};}};// Rechazar acción\nexport const rechazarAccion=async(accionId,motivo)=>{try{return await apiRequest(`/acciones-personal/${accionId}/rechazar`,{method:'POST',body:JSON.stringify({motivo})});}catch(error){console.error('Error al rechazar acción:',error);return{success:false,message:error.message};}};// Ejecutar acción\nexport const ejecutarAccion=async accionId=>{try{return await apiRequest(`/acciones-personal/${accionId}/ejecutar`,{method:'POST'});}catch(error){console.error('Error al ejecutar acción:',error);return{success:false,message:error.message};}};","map":{"version":3,"names":["apiRequest","getAcciones","error","console","success","message","getEstadisticas","getAccionesPendientes","getAccionDetalle","accionId","crearAccion","datosAccion","method","body","JSON","stringify","aprobarAccion","comentarios","rechazarAccion","motivo","ejecutarAccion"],"sources":["C:/Users/josemontedeoca/rrhh-system/frontend/src/api/accionesPersonalApi.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\n\r\n// Obtener todas las acciones\r\nexport const getAcciones = async () => {\r\n  try {\r\n    return await apiRequest('/acciones-personal');\r\n  } catch (error) {\r\n    console.error('Error al obtener acciones:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Obtener estadísticas\r\nexport const getEstadisticas = async () => {\r\n  try {\r\n    return await apiRequest('/acciones-personal/estadisticas');\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Obtener acciones pendientes\r\nexport const getAccionesPendientes = async () => {\r\n  try {\r\n    return await apiRequest('/acciones-personal/pendientes');\r\n  } catch (error) {\r\n    console.error('Error al obtener acciones pendientes:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Obtener detalle de una acción específica\r\nexport const getAccionDetalle = async (accionId) => {\r\n  try {\r\n    return await apiRequest(`/acciones-personal/${accionId}`);\r\n  } catch (error) {\r\n    console.error('Error al obtener detalle de acción:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Crear nueva acción\r\nexport const crearAccion = async (datosAccion) => {\r\n  try {\r\n    return await apiRequest('/acciones-personal', {\r\n      method: 'POST',\r\n      body: JSON.stringify(datosAccion)\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al crear acción:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Aprobar acción\r\nexport const aprobarAccion = async (accionId, comentarios) => {\r\n  try {\r\n    return await apiRequest(`/acciones-personal/${accionId}/aprobar`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ comentarios })\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al aprobar acción:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Rechazar acción\r\nexport const rechazarAccion = async (accionId, motivo) => {\r\n  try {\r\n    return await apiRequest(`/acciones-personal/${accionId}/rechazar`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ motivo })\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al rechazar acción:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Ejecutar acción\r\nexport const ejecutarAccion = async (accionId) => {\r\n  try {\r\n    return await apiRequest(`/acciones-personal/${accionId}/ejecutar`, {\r\n      method: 'POST'\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al ejecutar acción:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}